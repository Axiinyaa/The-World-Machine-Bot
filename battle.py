from interactions import *
from uuid import uuid4
import validators
import re
import base64
import generate_text
import random

class BATTLES(Extension):
    @extension_command()
    async def battles(self, ctx):
        pass
    
    async def error_(ctx, error):
        await ctx.send('An error occurred, please try again!', ephemeral = True)
        
    @battles.subcommand(description='Convert old BCLs to the new format.')
    @option(description='The BCL to convert to the new format.', required=True)
    async def convert_bcl(self, ctx : CommandContext, old_bcl : str = ''):
        bcl_data = old_bcl.split('>')
        bcl_data[1] = 'Physical'
        bcl = '►'.join(bcl_data)
        
        encode = bcl.encode('utf-8')
        base64_ = base64.b64encode(encode)
        decoded_bcl = base64_.decode('utf-8')
        
        await ctx.send(f'Here is your new converted BCL string! ```{decoded_bcl}```', ephemeral=True)
    
    @battles.subcommand(description='Start up a battle generated by GPT-3.')
    async def setup(self, ctx : CommandContext):
        
        uid = uuid4()
        
        embed = Embed(
            title = 'A battle is about to commence!',
            color=0x933397
        )
        
        embed.add_field(
            name = 'How to add fighters?',
            value = 'Adding fighters is simple, click on \'Create Fighter\' to create a fighter, or import a BCL string.',
            inline=True
        )
        
        embed.add_field(
            name = 'Current Roster',
            value = 'There are no fighters in this tournament!',
            inline=True
        )
        
        buttons = [
            Button(style=ButtonStyle.SUCCESS, label='Create Fighter', custom_id=f'create {uid}'),
            Button(style=ButtonStyle.PRIMARY, label='Import from BCL', custom_id=f'import {uid}'),
            Button(style=ButtonStyle.SECONDARY, label='Remove Fighter', custom_id=f'delete {uid}', disabled=True),
            Button(style=ButtonStyle.DANGER, label='Start Tournament', custom_id=f'start {uid}')
        ]
        
        msg = await ctx.send(embeds=embed, components=buttons)
        
        battle_list = []
        name_list = []
        
        while True:
            
            current_embed: Embed = msg.embeds[0]
            
            if len(name_list) % 2 == 0:
                buttons[3].disabled = False
            
            if not len(name_list) == 0:
                current_embed.fields[1].value = '\n'.join(name_list)
                buttons[2].disabled = False
                await msg.edit(embeds=current_embed, components= buttons)
            else:
                current_embed.fields[1].value = 'There are no fighters in this tournament!'
                buttons[2].disabled = True
                buttons[3].disabled = True
                await msg.edit(embeds=current_embed, components= buttons)
            
            button_ctx : ComponentContext = await self.client.wait_for_component(components=buttons)
        
            data = button_ctx.data.custom_id
            
            if data == f'create {uid}':
                
                modal = Modal(
                custom_id='battle',
                title = 'Generate a Battle Contestant',
                components=[
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id='name',
                        label='Name',
                        placeholder='What is their name?',
                        required=True
                    ),
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id=f'weapontype {uid}',
                        label='Weapon Type',
                        placeholder='Type either Magical, Physical or Tool.',
                        required=True
                    ),
                    
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id='weapon',
                        label='Weapon Name',
                        placeholder='What is their weapon called?',
                        required=True
                    ),
                    TextInput(
                        style = TextStyleType.PARAGRAPH,
                        custom_id='description',
                        label='Personality',
                        placeholder='Write a description of your fighter\'s personality, be sure to list pronouns.',
                        required=True
                    ),
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id='url',
                        label='Image URL',
                        placeholder='https://image/my_image.png',
                        required=True
                    )
                    ]
                )
                
                await button_ctx.popup(modal)
                
                modal_ctx, values = await self.client.wait_for_modal(modal)
                
                can_pass = True
                
                if not validators.url(values[4]):
                    await modal_ctx.send('You need to put in a valid image url!', ephemeral = True)
                    can_pass = False
                
                if values[1].lower() == 'magical':
                    pass
                elif values[1].lower() == 'physical':
                    pass
                elif values[1].lower() == 'tool':
                    pass
                else:
                    await modal_ctx.send(f'Sorry, but you need to type either Magical, Physical or Tool for the weapon type.', ephemeral = True)
                    can_pass = False
                    
                if values[0] in name_list:
                    await modal_ctx.send(f'Sorry, it seems as though ``{values[0]}`` is already a fighter in this tournament!', ephemeral = True)
                    can_pass = False
                
                if can_pass:
                    bcl = f'{values[0]}►{values[1]}►{values[2]}►{values[3]}►{values[4]}'
                    
                    battle_list.append(bcl)
                    name_list.append(values[0])
                    
                    encode = bcl.encode('utf-8')
                    base64_ = base64.b64encode(encode)
                    decoded_bcl = base64_.decode('utf-8')
                    
                    await modal_ctx.send(f'<@{modal_ctx.author.id}> added ``{values[0]}`` to the roster.')
                    await modal_ctx.send(f'Successfully created ``{values[0]}``. To use this fighter in the future, please save this BCL: ```{decoded_bcl}```', ephemeral=True)
                
            if data == f'import {uid}':
                modal = Modal(
                    custom_id='bcl',
                    title='Import from BCL',
                    components=[
                        TextInput(style=TextStyleType.PARAGRAPH, custom_id='sus', label='BCL', placeholder='Input BCL data here. You can add more fighters by putting a \',\' between each BCL.')
                    ]
                )
                
                await button_ctx.popup(modal)
                
                modal_ctx, values = await self.client.wait_for_modal(modal)
                
                list_of_fighters = []
                decoded_fighters = []
                
                if ',' in values[0]:
                    list_of_fighters = values[0].split(',')
                
                can_pass = True
                
                decoded_bcl = ''
                
                try:
                    if len(list_of_fighters) > 0:
                        for fighter in list_of_fighters:
                            encode = fighter.encode('utf-8')
                            base64_ = base64.b64decode(encode)
                            decoded_bcl = base64_.decode('utf-8')
                            decoded_fighters.append(decoded_bcl)
                    else:
                        encode = values[0].encode('utf-8')
                        base64_ = base64.b64decode(encode)
                        decoded_bcl = base64_.decode('utf-8')
                    
                    name = decoded_bcl.split('►')[0]
                    
                    if name in name_list:
                        await modal_ctx.send(f'Sorry, it seems as though ``{name}`` is already a fighter in this tournament!', ephemeral = True)
                        can_pass = False
                    
                    if can_pass:
                        
                        
                        if len(list_of_fighters) > 0:
                            
                            for fighter in decoded_fighters:
                                name = fighter.split('►')[0]
                                if not name in name_list:
                                    name_list.append(name)
                                    battle_list.append(fighter)
                            
                            await modal_ctx.send(f'<@{modal_ctx.author.id}> added {len(name_list)} fighters to the roster.')
                            await modal_ctx.send(f'Successfully imported {len(name_list)} fighters.', ephemeral = True)
                        else:
                            battle_list.append(decoded_bcl)
                            name_list.append(name)
                            await modal_ctx.send(f'<@{modal_ctx.author.id}> added ``{name}`` to the roster.')
                            await modal_ctx.send(f'Successfully imported ``{name}``', ephemeral = True)
                except:
                    await modal_ctx.send(f'It seems the inputted BCL(s) were formatted incorrectly.', ephemeral = True)
            
            if data == f'delete {uid}':
                
                choices = []
                
                i = 0
                for name in name_list:
                    choices.append(SelectOption(label=name, value = i))
                    i += 1
                    
                menu = SelectMenu(
                    custom_id=f'menu {uid}',
                    options=choices,
                    placeholder='Select a fighter to remove.'
                )
                
                can_pass = True
                
                if not Permissions.ADMINISTRATOR in button_ctx.author.permissions:
                    await button_ctx.send('Sorry! But you need Administrator permissions in this server to remove a fighter!', ephemeral = True)
                    can_pass = False
                
                if can_pass:
                    await button_ctx.send('', components = menu, ephemeral=True)
                    
                    menu_modal = await self.client.wait_for_component(menu)
                    
                    del battle_list[int(menu_modal.data.values[0])]
                    name_ = name_list.pop(int(menu_modal.data.values[0]))
                    
                    await menu_modal.send(f'Successfully removed ``{name_}``', ephemeral = True)
                    
            if data == f'start {uid}':
                
                can_pass = True
                
                if not Permissions.ADMINISTRATOR in button_ctx.author.permissions:
                    await button_ctx.send('Sorry! But you need Administrator permissions in this server to start a tournament!', ephemeral = True)
                    can_pass = False
                
                battles = []
                
                random.shuffle(battle_list)

                if can_pass:
                    i = 1
                    for contestant in battle_list:
                        if i % 2 == 0:
                            battles.append([battle_list[i - 2], battle_list[i - 1]])
                            
                        i += 1
                        
                    await msg.edit(embeds=current_embed, components=[])
                    
                    b_index = 0
                    
                    while len(battle_list) > 1:
                        if not b_index == 0:
                            await ctx.channel.send('**Starting Next Round!**')
                            battles = []
                            
                            i = 1
                            for contestant in battle_list:
                                if i % 2 == 0:
                                    battles.append([battle_list[i - 2], battle_list[i - 1]])
                                i += 1
                            
                        index = 0
                        
                        for battle in battles:
                            
                            c_one = battle[0].split('►')
                            c_two = battle[1].split('►')
                            btl = await ctx.channel.send(f"**A battle begins! {c_one[0]} versus {c_two[0]}!**")
                            
                            btl1 = await btl.reply('Generating battle... <a:loading:1026539890382483576>')
                            
                            num = random.randint(0, 1)
            
                            winner = None
                            
                            if num == 0:
                                winner = c_one
                                del name_list[battle_list.index(battle[1])]
                                battle_list.remove(battle[1])
                            else:
                                winner = c_two
                                del name_list[battle_list.index(battle[0])]
                                battle_list.remove(battle[0])
                            
                            text = await generate_text.GenerateBattle(c_one[1], c_one[0], c_one[2], c_one[3], c_two[1], c_two[0], c_two[2], c_two[3], winner[0])
                            
                            embed = Embed(
                                title = f'{c_one[0]} versus {c_two[0]}',
                                description = text[0]
                            )
                            
                            result = await btl1.edit(content = '', embeds=embed)
                            
                            index += 1
                            
                            if len(battle_list) == 1:
                                result_embed = Embed(
                                        title = f'{winner[0]} is the winner of the tournament!',
                                        description='Congrats!',
                                        thumbnail=EmbedImageStruct(url=winner[4]),
                                    )
                                
                                await result.reply(embeds=result_embed)
                                return
                            
                            if index == len(battles):
                                
                                print(len(battle_list))
                                
                                result_embed = Embed(
                                        title = f'{winner[0]} is the winner of this round!',
                                        description='The next round will begin in 20 seconds!',
                                        thumbnail=EmbedImageStruct(url=winner[4]),
                                    )
                            
                            else:
                                result_embed = Embed(
                                    title = f'{winner[0]} is the winner!',
                                    thumbnail=EmbedImageStruct(url=winner[4]),
                                    description='The next battle will begin in 20 seconds!'
                                )
                            
                            await result.reply(embeds=result_embed)
                            
                            await asyncio.sleep(20)
                            
                        b_index += 1
    
    '''async def fight(ctx : CommandContext, bcl = None, bcl_ : Attachment = None):
        
        if (bcl == None):
            text_file : io.BytesIO = await bcl_.download()
            
            bcl = text_file.read().decode('utf-8')
        
        await ctx.send('BCL Loaded!', ephemeral=True)
        
        battle_list = bcl.split('^')
        
        random.shuffle(battle_list)
        
        if not ctx.author.id == 302883948424462346:
            if len(battle_list) > 2:
                await ctx.send('To prevent spamming, please do not include more than two fighters!', ephemeral = True)
                return
        
        battles = []
        
        i = 1
        for contestant in battle_list:
            if i % 2 == 0:
                battles.append([battle_list[i - 2], battle_list[i - 1]])
                
            i += 1
        
        b_index = 0
        
        while len(battle_list) > 1:
            if not b_index == 0:
                await ctx.channel.send('**Starting Next Round!**')
                battles = []
                
                i = 1
                for contestant in battle_list:
                    if i % 2 == 0:
                        battles.append([battle_list[i - 2], battle_list[i - 1]])
                    i += 1
                
            index = 0
            
            for battle in battles:
                
                c_one = battle[0].split('>')
                c_two = battle[1].split('>')
                btl = await ctx.channel.send(f"**A battle begins! {c_one[0]} versus {c_two[0]}!**")
                
                btl1 = await btl.reply('Generating battle... <a:loading:1026539890382483576>')
                
                num = random.randint(0, 1)
                
                winner = None
                
                if num == 0:
                    winner = c_one
                    battle_list.remove(battle[1])
                else:
                    winner = c_two
                    battle_list.remove(battle[0])
                
                text = await generate_text.GenerateBattle(c_one[1], c_one[0], c_one[2], c_one[3], c_two[1], c_two[0], c_two[2], c_two[3], winner[0])
                
                embed = Embed(
                    title = f'{c_one[0]} versus {c_two[0]}',
                    description = text[0]
                )
                
                result = await btl1.edit(content = '', embeds=embed)
                
                index += 1
                
                if index == len(battles):
                    result_embed = Embed(
                            title = f'{winner[0]} is the winner of this round!',
                            thumbnail=EmbedImageStruct(url=winner[4]),
                        )
                
                else:
                    result_embed = Embed(
                        title = f'{winner[0]} is the winner!',
                        thumbnail=EmbedImageStruct(url=winner[4]),
                        description='The next battle will begin in 20 seconds!'
                    )
                
                await result.reply(embeds=result_embed)
                
                await asyncio.sleep(20)
                
            b_index += 1
            
    @bot.command()
    async def generate_bcl(ctx):
        modal = Modal(
                custom_id='battle',
                title = 'Generate a Battle Contestant',
                components=[
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id='name',
                        label='Name',
                        placeholder='What is their name?',
                        required=True
                    ),
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id='gender',
                        label='Pronoun',
                        placeholder='He/She/They, for example.',
                        required=True
                    ),
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id='weapon',
                        label='Weapon',
                        placeholder='What weapon do they wield?',
                        required=True
                    ),
                    TextInput(
                        style = TextStyleType.PARAGRAPH,
                        custom_id='description',
                        label='Personality',
                        placeholder='Write a short description of your fighter\'s personality.',
                        required=True
                    ),
                    TextInput(
                        style = TextStyleType.SHORT,
                        custom_id='url',
                        label='Image URL',
                        placeholder='https://image/my_image.png',
                        required=True
                    )
                ]
            )
            
        await ctx.popup(modal)    
    '''

def setup(client):
    BATTLES(client)